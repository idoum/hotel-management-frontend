import axios from 'axios';

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3005/api';

// Cr√©er l'instance axios
export const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Intercepteur pour ajouter le token d'authentification
apiClient.interceptors.request.use(
  (config) => {
    // ‚úÖ Protection SSR - seulement c√¥t√© client
    if (typeof window !== 'undefined') {
      const token = localStorage.getItem('hotel_auth_token');
      
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    }
    
    // Log des requ√™tes en d√©veloppement
    if (process.env.NODE_ENV === 'development') {
      console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    }
    
    return config;
  },
  (error) => {
    console.error('‚ùå API Request Error:', error);
    return Promise.reject(error);
  }
);

// Intercepteur pour g√©rer les r√©ponses et erreurs
apiClient.interceptors.response.use(
  (response) => {
    // Log des r√©ponses en d√©veloppement
    if (process.env.NODE_ENV === 'development') {
      console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    }
    
    return response.data; // Retourner directement les donn√©es
  },
  (error) => {
    console.error('‚ùå API Response Error:', error);
    
    // Gestion des erreurs sp√©cifiques
    if (error.response) {
      const { status, data } = error.response;
      
      // Token expir√© ou invalide
      if (status === 401 && typeof window !== 'undefined') {
        // Nettoyer l'authentification
        localStorage.removeItem('hotel_auth_token');
        localStorage.removeItem('hotel_auth_user');
        
        // Rediriger vers login si pas d√©j√† sur la page de login
        if (window.location.pathname !== '/login') {
          window.location.href = '/login';
        }
      }
      
      // Cr√©er une erreur personnalis√©e avec le message du serveur
      const errorMessage = data?.message || data?.error || `Erreur HTTP ${status}`;
      const customError = new Error(errorMessage);
      (customError as any).name = `APIError${status}`;
      (customError as any).status = status;
      (customError as any).data = data;
      
      return Promise.reject(customError);
    }
    
    // Erreur r√©seau
    if (error.code === 'NETWORK_ERROR' || !error.response) {
      const networkError = new Error('Erreur de connexion au serveur - V√©rifiez que le backend est d√©marr√©');
      (networkError as any).name = 'NetworkError';
      return Promise.reject(networkError);
    }
    
    // Erreur timeout
    if (error.code === 'ECONNABORTED') {
      const timeoutError = new Error('D√©lai d\'attente d√©pass√©');
      (timeoutError as any).name = 'TimeoutError';
      return Promise.reject(timeoutError);
    }
    
    return Promise.reject(error);
  }
);

export default apiClient;
